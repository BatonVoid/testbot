import asyncio
from aiogram import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, BigInteger, Boolean, JSON, select
from sqlalchemy.sql import func
from sqlalchemy.orm import declarative_base, sessionmaker
import random
import logging
import json

TOKEN = "7909566566:AAEPuzHlvuME-WTOaL7jbGB_FHHCFtfG40Q"
TEST_START = datetime(2025, 5, 31, 0, 0)
TEST_END = datetime(2025, 5, 31, 23, 59, 59)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine("sqlite:///test.db")
Session = sessionmaker(bind=engine)
db = Session()

# –ú–æ–¥–µ–ª–∏
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True)
    full_name = Column(String)
    score = Column(Integer, default=0)
    completed = Column(Boolean, default=False)

class Question(Base):
    __tablename__ = "questions"
    id = Column(Integer, primary_key=True)
    text = Column(String)
    options = Column(JSON)
    correct_option = Column(String)

Base.metadata.create_all(engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TestStates(StatesGroup):
    waiting_name = State()
    in_test = State()

# –í–æ–ø—Ä–æ—Å—ã
def load_questions_from_file():
    with open("questions.json", "r", encoding="utf-8") as f:
        question_data = json.load(f)

    with Session() as session:
        if session.query(Question).count() == 0:
            for q in question_data:
                session.add(Question(text=q["text"], options=q["options"], correct_option=q["correct"]))
            session.commit()
            logger.info("‚úÖ –í–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î.")

load_questions_from_file()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    now = datetime.now()
    if not (TEST_START <= now <= TEST_END):
        await message.answer("–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ 31 –º–∞—è —Å 00:00 –¥–æ 23:59.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —É—á–∞—Å—Ç–∏—è:")
    await state.set_state(TestStates.waiting_name)

# –í–≤–æ–¥ –§–ò–û
@router.message(TestStates.waiting_name)
async def get_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    telegram_id = message.from_user.id

    user = db.query(User).filter_by(telegram_id=telegram_id).first()
    if not user:
        user = User(telegram_id=telegram_id, full_name=full_name)
        db.add(user)
        db.commit()

    questions = db.query(Question.id).order_by(func.random()).limit(40).all()
    if not questions:
        logger.error("No questions found in database")
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return

    question_ids = [q.id for q in questions]
    logger.info(f"Selected 40 questions: {question_ids}")
    await state.update_data(index=0, questions=question_ids, score=0, full_name=full_name)
    await state.set_state(TestStates.in_test)
    await send_next_question(message.chat.id, state)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_question(chat_id, state: FSMContext):
    data = await state.get_data()
    index = data.get("index", 0)
    question_ids = data.get("questions", [])

    if index >= len(question_ids):
        score = data.get("score", 0)
        user_name = data.get("full_name", "–ü—É—Ç–Ω–∏–∫")
        total_questions = len(question_ids)
        percentage = (score / total_questions * 100) if total_questions > 0 else 0

        user = db.query(User).filter_by(telegram_id=chat_id).first()
        if user:
            user.score = score
            user.completed = True
            db.commit()
        else:
            logger.error(f"User with telegram_id {chat_id} not found")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        result_message = (
            f"üåü {user_name}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! üåü\n"
            f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ <b>{score}</b> –∏–∑ <b>{total_questions}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{percentage:.1f}%</b>.\n"
        )
        if percentage >= 90:
            result_message += "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–≤—ë–∑–¥–Ω—ã–π –≥–µ—Ä–æ–π! üöÄ"
        elif percentage >= 70:
            result_message += "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Å–∏—è–µ—Ç–µ, –∫–∞–∫ —è—Ä–∫–∞—è –∑–≤–µ–∑–¥–∞! ‚ú®"
        elif percentage >= 50:
            result_message += "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–¥—Ç–∏ –∫ –∑–≤—ë–∑–¥–∞–º! üå†"
        else:
            result_message += "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –≤–µ—Ä—à–∏–Ω–∞–º! üí™"

        await bot.send_message(chat_id, result_message)
        await state.clear()
        return

    q_id = question_ids[index]
    question = db.get(Question, q_id)
    if not question:
        logger.error(f"Question with id {q_id} not found")
        await bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.update_data(index=index + 1)
        await send_next_question(chat_id, state)
        return

    kb = InlineKeyboardBuilder()
    for i, opt in enumerate(question.options):
        callback_data = f"q{q_id}o{i}"
        byte_length = len(callback_data.encode('utf-8'))
        if byte_length > 64:
            logger.error(f"Callback data too long ({byte_length} bytes): {callback_data}")
            callback_data = f"q{q_id}o{i}"[:64]
        kb.button(text=opt, callback_data=callback_data)
    kb.adjust(1)
    logger.info(f"Sending question {q_id}: {question.text} with callback_data: {[b.callback_data for row in kb.as_markup().inline_keyboard for b in row]}")

    await bot.send_message(chat_id, question.text, reply_markup=kb.as_markup())

    await asyncio.sleep(40)
    data = await state.get_data()
    if data.get("index", 0) == index:
        logger.info(f"User {chat_id} did not answer question {q_id} in time")
        await bot.send_message(chat_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
        await state.update_data(index=index + 1)
        await send_next_question(chat_id, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(TestStates.in_test)
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("index", 0)
    question_ids = data.get("questions", [])
    if index >= len(question_ids):
        await callback.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
        return

    q_id = question_ids[index]
    question = db.get(Question, q_id)
    if not question:
        logger.error(f"Question with id {q_id} not found")
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        if callback.data.startswith('q'):
            parts = callback.data.split('o')
            opt_id = int(parts[1])
            selected_option = question.options[opt_id]
            if selected_option == question.correct_option:
                score = data.get("score", 0) + 1
                await state.update_data(score=score)
                await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ")
            else:
                await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correct_option}")
    except (IndexError, ValueError) as e:
        logger.error(f"Invalid callback data: {callback.data}, error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    await callback.answer()
    await state.update_data(index=index + 1)
    await send_next_question(callback.message.chat.id, state)

# –ö–æ–º–∞–Ω–¥–∞ /top10
@router.message(Command("top10"))
async def show_top10(message: Message):
    top_users = db.query(User).filter(User.completed == True).order_by(User.score.desc()).limit(10).all()
    text = "<b>–¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
    for i, user in enumerate(top_users, 1):
        text += f"{i}. {user.full_name} ‚Äî {user.score} –±–∞–ª–ª–æ–≤\n"
    await message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ /stats
@router.message(Command("stats"))
async def show_stats(message: Message):
    total = db.query(User).count()
    completed = db.query(User).filter(User.completed == True).count()
    await message.answer(f"–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {total} —á–µ–ª–æ–≤–µ–∫.\n–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç: {completed}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
